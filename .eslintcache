[{"D:\\code\\apps\\js\\anman-list\\src\\components\\Item.js":"1","D:\\code\\apps\\js\\anman-list\\src\\components\\AddItem.js":"2","D:\\code\\apps\\js\\anman-list\\src\\server.js":"3","D:\\code\\apps\\js\\anman-list\\src\\components\\ItemList.js":"4","D:\\code\\apps\\js\\anman-list\\src\\index.js":"5","D:\\code\\apps\\js\\anman-list\\src\\App.jsx":"6","D:\\code\\apps\\js\\anman-list\\src\\views\\Login.jsx":"7","D:\\code\\apps\\js\\anman-list\\src\\views\\Home.jsx":"8","D:\\code\\apps\\js\\anman-list\\src\\views\\Signup.jsx":"9"},{"size":5301,"mtime":1623038899063,"results":"10","hashOfConfig":"11"},{"size":5781,"mtime":1623036385482,"results":"12","hashOfConfig":"11"},{"size":2703,"mtime":1648005929118,"results":"13","hashOfConfig":"11"},{"size":3315,"mtime":1648028645410,"results":"14","hashOfConfig":"11"},{"size":622,"mtime":1646962020366,"results":"15","hashOfConfig":"11"},{"size":1420,"mtime":1648006197567,"results":"16","hashOfConfig":"11"},{"size":4452,"mtime":1648005420211,"results":"17","hashOfConfig":"11"},{"size":4247,"mtime":1648028959805,"results":"18","hashOfConfig":"11"},{"size":5526,"mtime":1648002410129,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1r5hkz0",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\code\\apps\\js\\anman-list\\src\\components\\Item.js",["40","41"],"import React from 'react';\n\nimport './Item.css';\n\nimport Grid        from '@material-ui/core/Grid';\nimport Paper       from '@material-ui/core/Paper';\nimport Typography  from '@material-ui/core/Typography';\nimport IconButton  from '@material-ui/core/IconButton';\n\nimport ClearIcon from '@material-ui/icons/Clear';\nimport CheckIcon from '@material-ui/icons/Check';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport { Snackbar } from '@material-ui/core';\n\nclass Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      original: {\n        title:   this.props.title,\n        link:    this.props.link,\n        season:  this.props.season,\n        episode: this.props.episode,\n        chapter: this.props.chapter,\n      },\n      new: {\n        title:   this.props.title,\n        link:    this.props.link,\n        season:  this.props.season,\n        episode: this.props.episode,\n        chapter: this.props.chapter,\n      },\n    };\n\n    this.itemHasUpdated = this.itemHasUpdated.bind(this);\n    this.updateItem = this.updateItem.bind(this);\n  }\n\n  copyLink() {\n    navigator.clipboard.writeText(this.state.new.link);\n    this.props.toggleSnackbar();\n  }\n\n  itemHasUpdated() {\n    const original = this.state.original;\n    const n = this.state.new;\n\n    if (original.title && original.title !== n.title) {\n      return true;\n    }\n    if (original.link && original.link !== n.link) {\n      return true;\n    }\n    if (original.season && original.season !== n.season) {\n      return true;\n    }\n    if (original.episode && original.episode !== n.episode) {\n      return true;\n    }\n    if (original.chapter && original.chapter !== n.chapter) {\n      return true;\n    }\n    return false;\n  }\n\n  updateItem() {\n    if (this.itemHasUpdated()) {\n      this.props.update(this.state.new.title, this.state.new)\n    }\n  }\n\n  handleInput(type, value) {\n    if (type === 'epch') {\n      type = this.props.type === 'manga' ? 'chapter' : 'episode';\n    }\n\n    if (['season', 'episode', 'chapter'].includes(type)) {\n      if (isNaN(Number(value))) {\n        return;\n      }\n\n      value = Number(value)\n\n      if (value < 0) {\n        value = 0;\n      }\n      console.log(value);\n    }\n\n    this.setState(prevState => ({\n      new: {\n        ...prevState.new,\n        [type]: value\n      }\n    }));\n    console.log(this.state);\n  }\n\n  renderSeasonCounter() {\n    return (\n      <Grid item xs container direction='column' justify='center'>\n        <Grid item>\n          <IconButton size='small' onClick={ () => this.handleInput('season', this.state.new.season + 1) }>\n            <KeyboardArrowUpIcon />\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <Typography variant='overline'>{this.state.new.season}</Typography>\n        </Grid>\n        <Grid item>\n          <IconButton size='small' onClick={ () => this.handleInput('season', this.state.new.season - 1) }>\n            <KeyboardArrowDownIcon />\n          </IconButton>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderEpisodeChapterCounter() {\n    return (\n      <Grid item xs container direction='column' justify='center'>\n        <Grid item>\n          <IconButton size='small' onClick={ () => this.handleInput('epch', this.props.type === 'manga' ? this.state.new.chapter + 1 : this.state.new.episode + 1) }>\n            <KeyboardArrowUpIcon />\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <Typography variant='overline'>{this.props.type === 'manga' ? this.state.new.chapter : this.state.new.episode}</Typography>\n        </Grid>\n        <Grid item>\n          <IconButton size='small' onClick={ () => this.handleInput('epch', this.props.type === 'manga' ? this.state.chapter - 1 : this.state.new.episode - 1) }>\n            <KeyboardArrowDownIcon />\n          </IconButton>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  render() {\n    return (\n      <Paper className='Item'>\n        <Grid container direction='row' className='cell'>\n          <Grid item xs={9} container direction='column' className='contentText'>\n            <Grid item style={{ 'width': '100%' }}>\n              <Typography noWrap variant='h6'>\n                {this.state.new.title}\n              </Typography>\n            </Grid>\n            <br/>\n            <Grid item container direction='row'>\n              <Grid item xs>\n                <Typography noWrap variant='body2' color=\"primary\" onClick={() => this.copyLink()}>\n                  <a className=\"link\">{this.state.new.link}</a>\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={2} container>\n            {this.props.type === 'manga' ? <div/> : this.renderSeasonCounter()}\n            {this.renderEpisodeChapterCounter()}\n          </Grid>\n\n          <Grid item xs={1} container justify=\"center\" alignItems=\"center\">\n            <IconButton disabled={!this.itemHasUpdated()} onClick={this.updateItem} >\n              <CheckIcon />\n            </IconButton>\n            <IconButton disabled={!this.itemHasUpdated()} onClick={this.updateItem}>\n              <ClearIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nexport default Item;\n","D:\\code\\apps\\js\\anman-list\\src\\components\\AddItem.js",[],"D:\\code\\apps\\js\\anman-list\\src\\server.js",[],"D:\\code\\apps\\js\\anman-list\\src\\components\\ItemList.js",[],"D:\\code\\apps\\js\\anman-list\\src\\index.js",[],["42","43"],"D:\\code\\apps\\js\\anman-list\\src\\App.jsx",[],"D:\\code\\apps\\js\\anman-list\\src\\views\\Login.jsx",[],"D:\\code\\apps\\js\\anman-list\\src\\views\\Home.jsx",[],"D:\\code\\apps\\js\\anman-list\\src\\views\\Signup.jsx",[],{"ruleId":"44","severity":1,"message":"45","line":14,"column":10,"nodeType":"46","messageId":"47","endLine":14,"endColumn":18},{"ruleId":"48","severity":1,"message":"49","line":155,"column":19,"nodeType":"50","endLine":155,"endColumn":39},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},"no-unused-vars","'Snackbar' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-global-assign","no-unsafe-negation"]